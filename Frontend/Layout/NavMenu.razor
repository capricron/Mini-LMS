<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Frontend</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        @if (userRole == "Manager")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="assignments">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Assignments
                </NavLink>
            </div>
        }

        @if (userRole == "Learner")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="tugas">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Tugas
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string? userRole;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;

        // Optional: Load role saat menu dibuka
        if (!collapseNavMenu && userRole == null)
        {
            await LoadUserRole();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserRole();
    }

    private async Task LoadUserRole()
    {
        try
        {
            userRole = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "role");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user role from localStorage: {ex.Message}");
        }
    }
}