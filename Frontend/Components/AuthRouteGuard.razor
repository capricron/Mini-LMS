@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

@if (IsChecking)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView>
        <Authorized>
            @ChildContent
        </Authorized>
        <NotAuthorized>
            @{
                RedirectToLogin();
            }
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool IsChecking = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }

    // Method publik agar bisa dipanggil dari luar
    public async Task CheckAuthentication()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                RedirectToLogin();
            }
            else
            {
                IsChecking = false;
            }
        }
        catch
        {
            RedirectToLogin();
        }
    }

    private void RedirectToLogin()
    {
        Nav.NavigateTo("/login", forceLoad: true);
    }
}